<div class="filter-line-rev">
    <div>
        <Tooltip Text="Clear all" Position="top">
            <button class="filter-btn" @onclick="() => SetAllCheckboxes(false)">
                <img height="14" width="14"
                     src="/icons/delete-all-icon.svg"
                     alt="clear all icon" />
            </button>
        </Tooltip>
    </div>
    <div>
        <Tooltip Text="Select all" Position="top">
            <button class="filter-btn" @onclick="() => SetAllCheckboxes(true)">
                <img height="14" width="14"
                     src="/icons/double-tick-icon.svg"
                     alt="select all icon" />
            </button>
        </Tooltip>
    </div>
</div>
<div class="filter-line"><FluentCheckbox @bind-Value="t11">Interventional</FluentCheckbox></div>
<div class="filter-line"><FluentCheckbox @bind-Value="t12">Observational</FluentCheckbox></div>
<div class="filter-line"><FluentCheckbox @bind-Value="t13">Patient&nbsp;registry</FluentCheckbox></div>
<div class="filter-line"><FluentCheckbox @bind-Value="t14">Expanded&nbsp;access</FluentCheckbox></div>
<div class="filter-line"><FluentCheckbox @bind-Value="t15">Funded&nbsp;programme</FluentCheckbox></div>
<div class="filter-line"><FluentCheckbox @bind-Value="t16">Other</FluentCheckbox></div>


@code {
    bool _t11, _t12, _t13, _t14, _t15, _t16;

    [Parameter]
    public Action<string>? OnFeedbackChange { get; set; }

    [Parameter]
    public Action<string>? OnSQLChange { get; set; }

    public bool t11
    {
        get { return _t11; }
        set
        {
            _t11 = value;
            process_state();
        }
    }
    public bool t12
    {
        get { return _t12; }
        set
        {
            _t12 = value;
            process_state();
        }
    }
    public bool t13
    {
        get { return _t13; }
        set
        {
            _t13 = value;
            process_state();
        }

    }
    public bool t14
    {
        get { return _t14; }
        set
        {
            _t14 = value;
            process_state();
        }
    }
    public bool t15
    {
        get { return _t15; }
        set
        {
            _t15 = value;
            process_state();
        }
    }
    public bool t16
    {
        get { return _t16; }
        set
        {
            _t16 = value;
            process_state();
        }
    }

    private void process_state()
    {
        if (!_t11 && !_t12 && !_t13 && !_t14 && !_t15 && !_t16)
        {
            OnSQLChange!.Invoke("");
        }
        else if (_t11 && _t12 && _t13 && _t14 && _t15 && _t16)
        {
            OnSQLChange!.Invoke("");
        }
        else
        {
            string type_sql_string = "";
            type_sql_string += _t11 ? ", 11" : "";
            type_sql_string += _t12 ? ", 12" : "";
            type_sql_string += _t13 ? ", 13" : "";
            type_sql_string += _t14 ? ", 14" : "";
            type_sql_string += _t15 ? ", 15" : "";
            type_sql_string += _t16 ? ", 16" : "";

            if (type_sql_string == "")
            {
                OnSQLChange!.Invoke("");
            }
            else
            {
                OnSQLChange!.Invoke("type_id in (" + type_sql_string[2..] + ")");
            }
        }
    }

    private void SetAllCheckboxes(bool check_state)
    {
        t11 = check_state; t12 = check_state; 
        t13 = check_state; t14 = check_state; 
        t15 = check_state; t16 = check_state; 
    }

    public void ClearFilters()
    {
        _t11 = false; _t12 = false;
        _t13 = false; _t14 = false;
        _t15 = false; _t16 = false;
        OnSQLChange!.Invoke("");
    }

    public void SetFilters(string AppliedFilters)
    {
        if (string.IsNullOrEmpty(AppliedFilters))
        {
            ClearFilters();
        }
        else
        {
            if (AppliedFilters.StartsWith("type_id in ("))  // it should!
            {
                string Filters = AppliedFilters[12..].Trim(')', ' ');
                string[] selected = Filters.Split(',', StringSplitOptions.TrimEntries);
                for (int i = 0; i < selected.Length; i++)
                {
                    switch (selected[i])
                    {
                        case ("11"): _t11 = true; break;
                        case ("12"): _t12 = true; break;
                        case ("13"): _t13 = true; break;
                        case ("14"): _t14 = true; break;
                        case ("15"): _t15 = true; break;
                        case ("16"): _t16 = true; break;
                    }
                }
            }
            process_state();
        }
    }

}


<div class="top-bar">

    <div class="tb-filters">

        @if (!filtersBarShowing)
        {
            <div class="tb-filters-invisible">
                <div class="tb-filters-text">
                    <span>Filters</span>
                </div>
                <Tooltip Text="Expand Filters" Position="right">
                <div class="end-arrows" @onclick="(e) => HandleFiltersBarVisibilityChanged(e, true)">
                    <img height="18" width="18"
                     src="/icons/forward-icon.svg"
                     alt="left-arrow icon" />
                </div>
                    </Tooltip>
            </div>
        }

        @if (filtersBarShowing)
        {
            <div class="tb-filters-visible">
                <div class="tb-filters-text">
                    <span>Filters</span>
                </div>
            </div>
        }
    </div>

    <div class="tb-centre">
        @if (filtersBarShowing)
        {
            <Tooltip Text="Collapse Filters" Position="right">
            <div class="end-arrows" @onclick="(e) => HandleFiltersBarVisibilityChanged(e, false)">
                <img height="18" width="18"
                    src="/icons/backward-icon.svg"
                    alt="left-arrow icon" />
            </div>
            </Tooltip>
        }

        <div class="tb-spacer">&nbsp;</div>

    </div>

</div>


@code {
    bool filtersBarShowing = true;

    [Parameter]
    public EventCallback<bool> onFiltersBarVisibilityChanged { get; set; }

    [Parameter]
    public EventCallback<bool> onOptionsBarVisibilityChanged { get; set; }

    [Parameter]
    public EventCallback onExportButtonClicked { get; set; }

    private async Task HandleFiltersBarVisibilityChanged(EventArgs e, bool visibility)
    {
        filtersBarShowing = visibility;
        await onFiltersBarVisibilityChanged.InvokeAsync(visibility);
    }

    //bool open = false;
    //private string status = "";

}

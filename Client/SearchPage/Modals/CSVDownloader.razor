@inject IJSRuntime JS

@using System.Text
@using CsvHelper
@using Newtonsoft.Json
@using System.Globalization
@using System.Reflection
@using ServiceStack
@using ServiceStack.Text
@using CsvWriter = CsvHelper.CsvWriter
@using JsonSerializer = System.Text.Json.JsonSerializer
@implements IDialogContentComponent<DialogData>

<p>A default name for the file is given below. Please edit this name if you wish, before saving (max 60 chars).</p>
<FluentTextArea Rows="1" Cols="60" @bind-Value="@Content.SearchParams!.storage_name"></FluentTextArea>
<p></p>
<button @onclick="DownloadCsv" class="btn">Download CSV</button>
@code {
    [Parameter]
    public DialogData Content { get; set; } = default!;

    private static string ToCsvCustom<T>(string separator, IEnumerable<T> objectlist)
    {
        var t = typeof(T);
        var fields = t.GetFields();

        var header = string.Join(separator, fields.Select(f => f.Name).ToArray());

        var csvdata = new StringBuilder();
        csvdata.AppendLine(header);

        foreach (var o in objectlist) 
            csvdata.AppendLine(ToCsvFieldsCustom(separator, fields, o));

        return csvdata.ToString();
    }

    private static string ToCsvFieldsCustom(string separator, FieldInfo[] fields, object o)
    {
        var line = new StringBuilder();

        foreach (var f in fields)
        {
            if (line.Length > 0)
                line.Append(separator);

            var x = f.GetValue(o);

            if (x != null)
                line.Append(x);
        }

        return line.ToString();
    }

    private Stream GetFileStream()
    {
        var data = new List<StudySummary>();
        foreach (var studyString in Content.BaseSet)
        {
            var study = JsonSerializer.Deserialize<StudySummary>(studyString);
            if (study == null)
            {
                continue;
            }

            data.Add(study);
        }
        var sb = new StringBuilder();
        sb.AppendLine("study_id,study_name,description,dss,start_year," +
                      "start_month,type_id,type_name,status_id,status_name," +
                      "gender_elig,min_age,max_age,phase_id,alloc_id,feature_list,has_objects," +
                      "country_list,conditions_list,provenance");
        foreach (var d in data)
        {
            sb.AppendLine($"{d.study_id},{CleanString(d.study_name)}," +
                          $"{CleanString(d.description)}," +
                          $"{CleanString(d.dss)}," +
                          $"{d.start_year},{d.start_month},{d.type_id}," +
                          $"{CleanString(d.type_name)}," +
                          $"{d.status_id}," +
                          $"{CleanString(d.status_name)}," +
                          $"{CleanString(d.gender_elig)}," +
                          $"{CleanString(d.min_age)}," +
                          $"{CleanString(d.max_age)}," +
                          $"{d.phase_id},{d.alloc_id}," +
                          $"{CleanString(d.feature_list)}," +
                          $"{CleanString(d.has_objects)}," +
                          $"{CleanString(d.country_list)}," +
                          $"{CleanString(d.condition_list)}," +
                          $"{CleanString(d.provenance)}");
        }
        return GetStreamWithStreamWriter(sb.ToString());
    }

    private static string CleanString(string? s)
    {
        if (string.IsNullOrWhiteSpace(s)) return "'null'";
        var sb = new StringBuilder();
        var cleanString = s.Replace("\n", " ").Replace("\r", " ");
        foreach (var c in cleanString) {
            if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == '.' 
                || c == '_' || c == ' ' || c == ':') 
            {
                sb.Append(c);
            }
        }
        return "'" + sb.ToString() + "'";
    }
    
    private static Stream GetStreamWithStreamWriter(string sampleString, Encoding? encoding = null)
    {
        encoding ??= Encoding.UTF8;
        var stream = new MemoryStream(encoding.GetByteCount(sampleString));
        using var writer = new StreamWriter(stream, encoding, -1, true);
        writer.Write(sampleString);
        writer.Flush();
        stream.Position = 0;
        return stream;
    }
    
    private async Task DownloadCsv()
    {
        var fileStream = GetFileStream();
        var fileName = Content.SearchParams!.storage_name + ".csv";
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadCsvFile", fileName, streamRef);
    }
}




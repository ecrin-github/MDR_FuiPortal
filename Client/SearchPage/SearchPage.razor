@page "/Search"
@inject HttpClient Http
@using MDR_FuiPortal.Client.SearchPage.InputComponents
@using MDR_FuiPortal.Client.SearchPage.ResultComponents
@using System.Text.RegularExpressions;

<PageTitle>MDR Search</PageTitle>

<TopBarSearch onFiltersBarVisibilityChanged="ChangeFiltersBarVisibility"
              onOptionsBarVisibilityChanged="ChangeOptionsBarVisibility" />

<div id="body-outer">
    <div id="body-main">

        @if (filtersBarShowing)
        {
            <div id="left-bar">
                <div id="filters-container">
                    <FluentDesignSystemProvider FillColor="#ecedee">
                        <FluentAccordion>
                            <FluentAccordionItem Heading="By Type" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CheckGroupType OnFeedbackChange="updateTypeFBack" OnSQLChange="updateTypeSQL" />
                            </FluentAccordionItem>
                            <FluentAccordionItem Heading="By Status" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CheckGroupStatus OnFeedbackChange="updateStatusFBack" OnSQLChange="updateStatusSQL" />
                            </FluentAccordionItem>
                            <FluentAccordionItem Heading="By Start Year" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <YearSelection OnFeedbackChange="updateYearFBack" OnSQLChange="updateYearSQL" />
                            </FluentAccordionItem>
                            <FluentAccordionItem Heading="By Location" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CountrySelection onListChanged="updateCountryList" />
                            </FluentAccordionItem>
                            <FluentAccordionItem Heading="By Linked Object" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CheckGroupObject OnFeedbackChange="updateObjectFBack" OnSQLChange="updateObjectSQL" />
                            </FluentAccordionItem>
                        </FluentAccordion>
                    </FluentDesignSystemProvider>

                    <div class="filter-expln">
                        <p class="small-text small-text-expanded">
                            <b>N.B.</b>The two filters below only apply to interventional studies (= clinical trials).<br /><br />
                            If included in a query the results will be drawn <b><i>only</i></b> from interventional studies.
                        </p>
                    </div>

                    <FluentDesignSystemProvider FillColor="#ecedee">
                        <FluentAccordion>
                            <FluentAccordionItem Heading="By Phase" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CheckGroupPhase OnFeedbackChange="updatePhaseFBack" OnSQLChange="updatePhaseSQL" />
                            </FluentAccordionItem>
                            <FluentAccordionItem Heading="By Allocation" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CheckGroupAlloc OnFeedbackChange="updateAllocFBack" OnSQLChange="updateAllocSQL"/>
                            </FluentAccordionItem>
                        </FluentAccordion>
                    </FluentDesignSystemProvider>
                </div>
            </div>
        }

        <div id="middle-bar">

            <div id="search-bar">
                <div id="search-type">
                    <div class="search-label-container">
                        <p class="search-label normal-blue-text">Search Type</p>
                    </div>
                    <div id="search-type-combo">
                        <MDRComboBox idOptions="searchOptions" 
                         HandleSelectedOptionChanged="SearchOptionChanged"></MDRComboBox>
                    </div>
                </div>

                @if (searchType == 2)
                {
                    <div id="search-subtype">
                        <div class="search-label-container">
                            <p class="search-label normal-blue-text">ID Type</p>
                        </div>
                        <div id="id-type-combo">
                            <MDRComboBox idOptions="idOptions"
                              HandleSelectedOptionChanged="idOptionChanged"></MDRComboBox>
                        </div>
                    </div>
                }

                <div id="search-params">
                     <div class="search-label-container">
                        <p class="search-label normal-blue-text">@paramsLabelText</p>
                    </div>
                    <div id="params-text">
                        <input type="text" @bind="@searchParamsValue" @bind:event="oninput"
                                           style="width: 100%;" />
                    </div>
                </div>
            </div>

            @if (showWhereClause)
            {
                <div id="sql-area">
                    <div id="sql-container">
                        <p class="small-text-italic">
                            SEARCH TYPE: @searchType: @searchText,
                            @if (idType > 0)
                            {
                                <span>ID TYPE: @idType: @idText</span><br/>
                            }
                            SEARCH TEXT: @searchParamsValue  <br />
                            FILTER(S): @filter_fback<br />
                            FILTER sql: @filter_sql<br />
                            TEXT SEARCH SCOPE: @scope_fback (@search_scope)
                        </p>
                    </div>
                </div>
            }

            <div id="result-area">

                <div id="results-heading">
                    <div id="results-found">
                        <p class="small-text no-wrap-text">@rec_num_indicator</p>
                    </div>
                    <div id="results-spacer">
                        
                    </div>
                    <div id="items-cb">
                        <p class="small-text no-wrap-text">items per page </p>
                    </div>
                    <div id="items-cb-label">
                        <select id="page_num_select" >
                            <option>10</option>
                            <option>25</option>
                            <option>50</option>
                        </select>
                    </div>
                     <div id="results-buttons">
                        <p>&nbsp;&nbsp;Fst-Prv (1 of @num_pages) Nxt-Lst</p>
                    </div>
                </div>

                <div id="results-list" >
                    <FluentDesignSystemProvider FillColor="#ecedee">
                    <FluentAccordion >
                        <PageContents Contents=@PageSet/>
                     </FluentAccordion>
                     </FluentDesignSystemProvider>
                </div>
            </div>

        </div>

        @if (optionsBarShowing)
        {
            <div id="right-bar">
                <BigButton id="SearchButton" Caption="Search" onClicked="Search" />
                <div class="RHSCheck" id="ShowWhere">
                     <div class="RHSCheckTextSection">
                        <p class="normal-blue-text">Show query details</p>
                     </div>
                     <div class="RHSCheckBoxSection">
                        <FluentCheckbox @bind-Value=showWhereClause></FluentCheckbox>
                     </div>
                </div>
                <CheckScope OnFeedbackChange="updateScopeFeedback" OnScopeChange="updateScopeScore" />
                <div class="RHSCheck" id="AggregateSearches">
                     <div class="RHSCheckTextSection">
                        <p class="normal-blue-text">Aggregate Searches</p>
                    </div>
                    <div class="RHSCheckBoxSection">
                        <FluentCheckbox @bind-Value=aggregateSearches></FluentCheckbox>
                    </div>
                </div>
                <BigButton id="ClearFilters" Caption="Clear Filters" onClicked="ClearFilters" />
                <BigButton id="ClearSearch" Caption="Clear Search" onClicked="ClearSearch" />
                <BigButton id="RemoveUnchecked" Caption="Remove Unchecked" onClicked="RemoveUnchecked" />
            </div>
        }
     </div>
</div>

@code {

    List<string>? BaseSet;
    List<string>? ShowSet;
    List<string>? PageSet = null;

    int rec_num;
    int num_pages;
    int num_recs_per_page = 10;
    string rec_num_indicator = "";
    int current_page = 1;

    bool filtersBarShowing = true;
    bool optionsBarShowing = true;

    private Dictionary<string, string> roman_suffixes = default!;

    private void ChangeFiltersBarVisibility(bool visibility)
    {
        filtersBarShowing = visibility;
    }

    private void ChangeOptionsBarVisibility(bool visibility)
    {
        optionsBarShowing = visibility;
    }

    private async Task Search()
    {
        string search_url = "api/Study/";
        if (searchType == 1)
        {

            if (!string.IsNullOrEmpty(searchParamsValue))
            {
                string processedPars = ProcessSearchParams(searchParamsValue);
                search_url += $"BySearch/{search_scope}/{processedPars}";
            }
        }

        if (searchType == 2)
        {

            search_url += "ByRegId/11/NCT01746290";
        }

        if (searchType == 3)
        {
            string? pmid = searchParamsValue;
            if (pmid is null || !int.TryParse(pmid, out int _))
            {
                // need some sort of message
                // saying this is not valid
            }
            else
            {
                search_url += $"ByPMID/{searchParamsValue}";
            }
        }

        BaseSet = await Http.GetFromJsonAsync<List<string>?>(search_url);
        if (BaseSet?.Any() == true)
        {
            rec_num = BaseSet.Count;
            num_pages = (rec_num / num_recs_per_page) + 1;

            rec_num_indicator = $"{rec_num} result";
            rec_num_indicator += rec_num > 1 ? "s" : "";
            rec_num_indicator += " found";
            current_page =  1;

            // if filter aplied - apply filter using linq

            ShowSet =  BaseSet;  // for now

            // if paging applied - select portion

            if (ShowSet.Count <= num_recs_per_page)
            {
                PageSet = ShowSet;

            }
            else
            {
                int next_page_pos = num_recs_per_page * current_page;
                int start_pos = next_page_pos - num_recs_per_page;
                int num_recs_on_page = rec_num - start_pos > num_recs_per_page
                                   ? num_recs_per_page
                                   : rec_num - start_pos;
                PageSet = ShowSet.GetRange(start_pos, num_recs_on_page);
            }
    }
        else
        {
            // post a 'none found message somewhere
            rec_num_indicator = "No records found";
        }
    }

    private void ClearFilters()
    {
        Console.WriteLine("boo - I am still clearing filters");
    }

    private void ClearSearch()
    {
        Console.WriteLine("boo - I am still clearing searches");
    }

    private void RemoveUnchecked()
    {
        Console.WriteLine("boo - I am still removing the unchecked");
    }




    string? searchText;
    int searchType = 1;
    string? idText;
    int? idType = 1;
    string? searchParamsValue;
    string paramsLabelText = "Parameters";
    bool SearchPossible = false;

    private void RecalculateSearchFeedback()
    {
        // Provide the text for the 'SQL area'

    }

    private bool RecalculateSearchSQL()
    {
        // provide the where clause for a SQL query (though this may be modified
        // at the server). Returns true or false dependent on whether query is possible.

        return false;  // for now
    }

    private string ProcessSearchParams(string in_pars)
    {
        string new_st = in_pars.ToLower() + " ";  // ' ' added to catch final numbers below
        new_st = new_st.Replace("'", "");      // simplifies things
        new_st = new_st.Replace("‘", "");
        new_st = new_st.Replace("’", "");
        new_st = new_st.Replace(".", "");      // simplifies things
        new_st = new_st.Replace("/", " ");     // split these words up

        if (new_st.Contains("in "))
        {
            new_st = new_st.Replace("in situ", "insitu");
            new_st = new_st.Replace("in vivo", "invivo");
            new_st = new_st.Replace("in vitro", "invitro");
            new_st = new_st.Replace("in silico", "insilico");
            new_st = new_st.Replace("in utero", "inutero");
        }
        if (new_st.Contains(" a "))
        {
            new_st = new_st.Replace("hepatitis a ", "hepatitis-a ");
            new_st = new_st.Replace("influenza a ", "influenza-a ");
            new_st = new_st.Replace("philia a ", "philia-a ");
            new_st = new_st.Replace("globin a ", "globin-a ");
            new_st = new_st.Replace("virus a ", "virus-a ");
            new_st = new_st.Replace("protein a ", "protein-a ");
            new_st = new_st.Replace("group a ", "group-a ");
            new_st = new_st.Replace("type a ", "type-a ");
            new_st = new_st.Replace("vitamin a ", "vitamin-a ");
            new_st = new_st.Replace("factor a ", "factor-a ");
            new_st = new_st.Replace("family a ", "family-a ");
            new_st = new_st.Replace("coenzyme a ", "coenzyme-a ");
            new_st = new_st.Replace("kinase a ", "kinase-a ");
            new_st = new_st.Replace("ferase a ", "ferase-a ");
            new_st = new_st.Replace("tidase a ", "tidase-a ");
            new_st = new_st.Replace("tidases a ", "tidases-a ");
            new_st = new_st.Replace("kinin a ", "kinin-a ");
        }
        if (new_st.Contains(" term "))
        {
            new_st = new_st.Replace("short term ", "short-term ");
            new_st = new_st.Replace("medium term ", "medium-term ");
            new_st = new_st.Replace("long term ", "long-term ");
        }
        if (Regex.IsMatch(new_st, @" \d{1,2} "))
        {
            while (Regex.IsMatch(new_st, @" \d{1,2} "))   // may be more than one
            {
                string to_replace = Regex.Match(new_st, @" \d{1,2} ").Value;
                string new_value;
                if (Regex.IsMatch(new_st, @" \d{1,2} mg"))
                {
                    new_value = to_replace[..^1]; // may be a dosage figure, usually mg;
                }
                else
                {
                    new_value = to_replace[1..];  // more often a suffix
                }
                new_st = new_st.Replace(to_replace, new_value);
            }
        }
        if (Regex.IsMatch(new_st, @" (?=[xvi])(x{0,2})(i[xv]|v?i{0,3}) "))
        {
            while (Regex.IsMatch(new_st, @" (?=[xvi])(x{0,2})(i[xv]|v?i{0,3}) "))
            {
                string to_replace = Regex.Match(new_st, @" (?=[xvi])(x{0,2})(i[xv]|v?i{0,3}) ").Value;
                string new_value = roman_suffixes[to_replace];
                new_st = new_st.Replace(to_replace, new_value);
            }
        }
        if (new_st.Contains("phase "))   // some phase types not picked up above
        {
            new_st = new_st.Replace("phase 1a ", "phase1a ");
            new_st = new_st.Replace("phase 1b ", "phase1b ");
            new_st = new_st.Replace("phase 1/2 ", "phase12 ");
            new_st = new_st.Replace("phase i/ii ", "phase12 ");
            new_st = new_st.Replace("phase 2/3 ", "phase23 ");
            new_st = new_st.Replace("phase ii/iii ", "phase23 ");
            new_st = new_st.Replace("phase 2a ", "phase2a ");
            new_st = new_st.Replace("phase 2b ", "phase2b ");
            new_st = new_st.Replace("phase 3/4 ", "phase34 ");
            new_st = new_st.Replace("phase iii/iv ", "phase34 ");
        }

        new_st = new_st.Replace(" or ", " | ");  
        new_st = new_st.Replace(" not(", " !(");

        return new_st.Trim();
    }

    string filter_sql = "", filter_fback = "";
    string type_sql = "", type_fback = "";
    string status_sql = "", status_fback = "";
    string year_sql = "", year_fback = "";
    string country_sql = "", country_fback = "";
    string object_sql = "", object_fback = "";
    string phase_sql = "", phase_fback = "";
    string alloc_sql = "", alloc_fback = "";
    string scope_fback = "";
    int search_scope = 3;

    private void RecalcFilterFeedback()
    {
        string fb_string = "";
        fb_string += type_fback == "" ? "" : " AND " + type_fback;
        fb_string += status_fback == "" ? "" : " AND " + status_fback;
        fb_string += year_fback == "" ? "" : " AND " + year_fback;
        fb_string += country_fback == "" ? "" : " AND " + country_fback;
        fb_string += object_fback == "" ? "" : " AND HAS " + object_fback;
        fb_string += phase_fback == "" ? "" : " AND " + phase_fback;
        fb_string += alloc_fback == "" ? "" : " AND " + alloc_fback;
        filter_fback = fb_string == "" ? "" : fb_string[5..];
        StateHasChanged();
    }

    private void updateTypeFBack(string fback)
    {
        type_fback = fback;  RecalcFilterFeedback();
    }

    private void updateStatusFBack(string fback)
    {
        status_fback = fback; RecalcFilterFeedback(); 
    }

    private void updateYearFBack(string fback)
    {
        year_fback = fback; RecalcFilterFeedback();
    }

    private void updateCountryList(List<Country> countriesSelected)
    {
        string sqlparams = ""; string fback = "";
        if (countriesSelected?.Any() == true)
        {
            foreach (Country c in countriesSelected)
            {
                fback += ", " + c.name;
                sqlparams += ", " + c.id.ToString();
            }
        }
        country_fback = $"countries include one of ({fback[2..]})";
        country_sql = $"country_id in ({sqlparams[2..]})";
        RecalcFilterFeedback();
        RecalcFilterSQL();
    }

    private void updateObjectFBack(string fback)
    {
        object_fback = fback; RecalcFilterFeedback();
    }

    private void updatePhaseFBack(string fback)
    {
        phase_fback = fback; RecalcFilterFeedback();
    }

    private void updateAllocFBack(string fback)
    {
        alloc_fback = fback; RecalcFilterFeedback();
    }


    private void RecalcFilterSQL()
    {
        string sql_string = "";
        sql_string += type_sql == "" ? "" : ", " + type_sql;
        sql_string += status_sql == "" ? "" : ", " + status_sql;
        sql_string += year_sql == "" ? "" : ", " + year_sql;
        sql_string += country_sql == "" ? "" : ", " + country_sql;
        sql_string += object_sql == "" ? "" : ", " + object_sql;
        sql_string += phase_sql == "" ? "" : ", " + phase_sql;
        sql_string += alloc_sql == "" ? "" : ", " + alloc_sql;
        filter_sql = sql_string == "" ? "" : "WITH " + sql_string[2..];
        StateHasChanged();
    }

    private void updateTypeSQL(string sql)
    {
        type_sql = sql; RecalcFilterSQL();
    }

    private void updateStatusSQL(string sql)
    {
        status_sql = sql; RecalcFilterSQL();
    }

    private void updateYearSQL(string sql)
    {
        year_sql = sql; RecalcFilterSQL();
    }

    private void updateObjectSQL(string sql)
    {
        object_sql = sql; RecalcFilterSQL();
    }

    private void updatePhaseSQL(string sql)
    {
        phase_sql = sql; RecalcFilterSQL();
    }

    private void updateAllocSQL(string sql)
    {
        alloc_sql = sql; RecalcFilterSQL();
    }

    private void updateScopeFeedback(string feedback)
    {
        scope_fback = feedback; StateHasChanged();
    }

    private void updateScopeScore(int scopeScore)
    {
        search_scope = scopeScore; StateHasChanged();
    }

    bool showWhereClause = true;
    bool aggregateSearches = false;

    List<Option<string>> searchOptions = default!;
    List<Option<string>> idOptions = default!;

    protected override void OnInitialized()
    {
        searchOptions = new()
        {
            { new Option<string> { Value = "1", Text = "Key word(s)", Selected = true } },
            { new Option<string> { Value = "2", Text = "Study identifier"} },
            { new Option<string> { Value = "3", Text = "Paper identifier (PMID)" } }
        };

        idOptions = new()
        {
            { new Option<string> { Value = "11", Text = "Trial registry ID", Selected = true } },
            { new Option<string> { Value = "12", Text = "Ethics Review ID"} },
            { new Option<string> { Value = "13", Text = "Funder’s ID"} },
            { new Option<string> { Value = "14", Text = "Sponsor’s ID" } },
            { new Option<string> { Value = "41", Text = "Regulatory Authority ID" } },
            { new Option<string> { Value = "39", Text = "NIH CTRP ID"} },
            { new Option<string> { Value = "40", Text = "DAIDS ID"} },
            { new Option<string> { Value = "42", Text = "NHBLI ID" } },
            { new Option<string> { Value = "45", Text = "Obsolete NTR number" } },
            { new Option<string> { Value = "45", Text = "CDR Number" } }
        };


        roman_suffixes = new()
        {
            {" i ", "1 "}, {" ii ", "2 "},{" iii ", "3 "},{" iv ", "4 "},{" v ", "5 "},
            {" vi ", "6 "},{" vii ", "7 "},{" viii ", "8 "},{" ix ", "9 "},{" x ", "10 "},
            {" xi ", "11 "}, {" xii ", "12 "},{" xiii ", "13 "},{" xiv ", "14 "},{" xv ", "15 "},
            {" xvi ", "16 "},{" xvii ", "17 "},{" xviii ", "18 "},{" xix ", "19 "},{" xx ", "20 " },
            {" xxi ", "21 "},{" xxii ", "22 "},{" xxiii ", "23 "},{" xxiv ", "24 "},{" xxv ", "25 " },
            {" xxvi ", "26 "},{" xxvii ", "27 "},{" xxviii ", "28 "},
            {" xxix ", "29 "},{" xxx ", "30 " }
        };

    }


    private void SearchOptionChanged(Option<string> s)
    {
        searchText = s?.Text ?? "None";
        searchType = Int32.Parse(s?.Value ?? "0");
        paramsLabelText = searchType switch 
        {
            1 => "Words",
            2 => "Identifier",
            3 => "PubMed ID",
            _ => "Parameters"
        };


        // for now - to make testing easier

        if (searchType == 1)
        {
            idType = 11;
            searchParamsValue = "brca";
        }

        if (searchType == 2)
        {

            searchParamsValue = "NCT01746290";
        }

        if (searchType == 3)
        {

            searchParamsValue = "1017769";
        }


        RecalculateSearchFeedback();
        SearchPossible = RecalculateSearchSQL();


    }

    private void idOptionChanged(Option<string> s)
    {
        idText = s?.Text ?? "None";
        idType = Int32.Parse(s?.Value ?? "0");
        RecalculateSearchFeedback();
        SearchPossible = RecalculateSearchSQL();

        // for now - to make testing easier
        if (idType == 11)
        {
            searchParamsValue = "NCT01746290";
        }
        if (idType == 14)
        {
            searchParamsValue = "19.05.CLI";
        }
    }

}

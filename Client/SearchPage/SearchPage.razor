@page "/Search"
@inject HttpClient Http
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@using MDR_FuiPortal.Client.SearchPage.InputComponents
@using MDR_FuiPortal.Client.SearchPage.ResultComponents
@using MDR_FuiPortal.Client.SearchPage.Modals
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using System.Web;

<PageTitle>MDR Search</PageTitle>

<TopBarSearch onFiltersBarVisibilityChanged="ChangeFiltersBarVisibility" />

<div id="body-outer">
    <div id="body-main">

        @if (filtersBarShowing)
        {
            <div id="left-bar">
                <div id="filters-container">
                    <FluentDesignSystemProvider FillColor="#ecedee">
                        <FluentAccordion>
                            <FluentAccordionItem Heading="By Type" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CheckGroupType OnSQLChange="updateTypeSQL" @ref="StudyTypeFilter" />
                            </FluentAccordionItem>
                            <FluentAccordionItem Heading="By Status" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CheckGroupStatus OnSQLChange="updateStatusSQL" @ref="StudyStatusFilter" />
                            </FluentAccordionItem>
                            <FluentAccordionItem Heading="By Start Year" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <YearSelection OnSQLChange="updateYearSQL" @ref="StudyYearFilter" />
                            </FluentAccordionItem>
                            <FluentAccordionItem Heading="By Location" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CountrySelection onListChanged="updateCountryList" @ref="StudyCountryFilter" />
                            </FluentAccordionItem>
                            <FluentAccordionItem Heading="By Linked Object" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CheckGroupObject OnSQLChange="updateObjectSQL" @ref="StudyObjectFilter" />
                            </FluentAccordionItem>
                        </FluentAccordion>
                    </FluentDesignSystemProvider>

                    <div class="filter-expln">
                        <p class="small-text small-text-expanded">
                            <b>N.B.</b>The two filters below only apply to interventional studies (= clinical trials).<br /><br />
                            If included in a query the results will be drawn <b><i>only</i></b> from interventional studies.
                        </p>
                    </div>

                    <FluentDesignSystemProvider FillColor="#ecedee">
                        <FluentAccordion>
                            <FluentAccordionItem Heading="By Phase" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CheckGroupPhase OnSQLChange="updatePhaseSQL" @ref="StudyPhaseFilter" />
                            </FluentAccordionItem>
                            <FluentAccordionItem Heading="By Allocation" Style="font-size: 1rem; color: var(--txt-emph-colour)">
                                <CheckGroupAlloc OnSQLChange="updateAllocSQL" @ref="StudyAllocFilter" />
                            </FluentAccordionItem>
                        </FluentAccordion>
                    </FluentDesignSystemProvider>
                </div>
            </div>
        }

        <div id="middle-bar">

            <div id="fixed-top">   <!-- Fixed area at top-->
                <div id="search-bar">
                    <div id="search-type">

                        <div class="search-label-container">
                            <p class="search-label normal-blue-text">Search Type</p>
                        </div>
                        <div id="search-type-combo">
                            <FluentSelect id="search-type-select"
                                      Items="@searchOptions"
                                      TOption="Option<string>"
                                      OptionText="@(i => i.Text)"
                                      OptionValue="@(i => i.Value)"

                                      OptionSelected="@(i => i.Selected)"
                                      Multiple=false
                                      Position="SelectPosition.Below"
                                      @bind-Value="@searchType"
                                      SelectedOptionChanged="(Option<string> s) => SearchOptionChanged(s)">
                                      </FluentSelect>
                        </div>
                    </div>

                        <div class="@hidden_attribute">
                            <div class="search-label-container">
                                <p class="search-label normal-blue-text">ID Type</p>
                            </div>
                            <div id="id-type-combo">

                                <FluentSelect id="id-type-select"
                                Items="@idOptions"
                                TOption="Option<string>"
                                OptionText="@(i => i.Text)"
                                OptionValue="@(i => i.Value)"

                                OptionSelected="@(i => i.Selected)"
                                Multiple=false
                                Position="SelectPosition.Below"
                                @bind-Value="@idType"
                                SelectedOptionChanged="(Option<string> s) => idOptionChanged(s)"></FluentSelect>
                            </div>
                        </div>


                    <div id="search-params">
                         <div class="search-label-container">
                            <p class="search-label normal-blue-text">@paramsLabelText</p>
                        </div>
                        <div id="params-text">
                            <input type="text" @bind="@searchParamsValue" @bind:event="oninput"
                            @onkeyup="HandleKeyUp" style="width: 100%;" />
                        </div>
                    </div>
                </div>
                           
                <div id="switch-area">
                    <ClearButton id="ClearFilters" Caption="Clear Filters" onClicked="ClearFilters" />
                    <div id="small-switch-spacer"></div>
                    <ClearButton id="ClearSearch" Caption="Clear Search" onClicked="ClearSearch" />
                    <div id="switch-spacer"></div>

                    <div id="show-switch" class="small-text no-wrap-text">
                        <FluentSwitch @bind-Value=showSearches style="margin-inline-end: 12px;">Show Search Details</FluentSwitch>
                    </div>
                    <div id="small-switch-spacer"></div>
                    <div id="agg-switch" class="small-text no-wrap-text">
                        <FluentSwitch @bind-Value=aggregateSearches style="margin-inline-end: 12px;">Aggregate Results</FluentSwitch>
                    </div>

                    <div id="switch-spacer"></div>

                    <div id="tt-switch" class="small-text no-wrap-text">
                        <FluentSwitch @bind-Value=searchInTTs style="margin-inline-end: 12px;">Search in Titles and Topics</FluentSwitch>
                    </div>
                    <div id="cond-switch" class="small-text no-wrap-text">
                        <FluentSwitch @bind-Value=searchInConds style="margin-inline-end: 12px;">Search in Conditions</FluentSwitch>
                    </div>
                </div>

                @if (showSearches)
                {
                    <div id="feedback">
                        <p class="small-text-italic"><b>Current search details:&nbsp;</b>@search_fb</p>
                    </div>
                }

                <div id="results-heading">
                    <div id="results-found">
                        <p class="small-text no-wrap-text">@rec_num_indicator</p>
                    </div>

                    <div id="buckets-progress-bar" hidden="@HideProgress">
                        <div class="progress-outer">
                            <div class="progress-inner" style="width:@percent_done%">@percent_done%</div>
                        </div>
                    </div>

                    <div id="results-spacer"> </div>

                    <div id="page-control">
                        <PageControl total_recs=rec_num ObtainRange="ShowRange" @ref="pagecon"/>
                    </div>
                </div>
            </div>

            <div id="fixed-results-container">
                <SpinLoader IsLoading="isLoading" IsFaulted="isEmpty">
                    <LoadingTemplate>
                        <div style="height:100px; margin-top:3rem;">
                            <Circle Color="royalblue" Size="60px" Center="true" />
                        </div>
                    </LoadingTemplate>
                    <ContentTemplate>
                        <div id="results-list">         <!-- Scrolling area -->
                            <FluentDesignSystemProvider FillColor="#fdfeff">     <!-- was #ecedee -->
                            @if (@PageSet is not null)
                            {   
                                <FluentAccordion>
                                    <PageContents Contents=@PageSet />
                                </FluentAccordion>
                            }
                            </FluentDesignSystemProvider>
                        </div>
                    </ContentTemplate>
                    <FaultedContentTemplate>
                        <div style="height:100px; margin-top:3rem;">
                            <p class="normal-blue-text" style="text-align: center; font-style: italic;">No records were found matching these search criteria</p>
                        </div>
                    </FaultedContentTemplate>
                </SpinLoader>
            </div>
        </div>

        <div id="right-bar">
            <div class="search-button-container">
                <button class="big-button big-button-text" id="SearchButton" @onclick="() => SearchClicked()">Search</button>
            </div>

            <div class="search-feedback">
                <p class="feedback-text">
                    @searchFeedback
                </p>
            </div>

            <div class="export-button-container">
                <button class="big-button big-button-text" id="ExportButton" hidden=@noResults 
                @onclick="@(()=> open = !open)">Export</button>
            </div>

            <FluentMenu Anchor="ExportButton" @bind-Open="open" @onmenuchange=OnMenuChange>
                <FluentMenuItem OnClick="@((e) => Console.WriteLine("Item 1 Clicked"))">
                    Download JSON
                </FluentMenuItem>
                <FluentMenuItem OnClick="@((e) => Console.WriteLine("Item 2 Clicked"))">
                    Download CSV
                </FluentMenuItem>
                <FluentMenuItem OnClick="@((e) => Console.WriteLine("Item 3 Clicked"))">
                    Download PDF
                </FluentMenuItem>
            </FluentMenu>

            <p>@status</p>

                <div class="export-button-container">
                    <button class="big-button big-button-text" id="StoreButton" 
                       @onclick="@(()=> open2 = !open2)">
                    Search Store
                    </button>
                </div>

                 <FluentMenu Anchor="StoreButton" @bind-Open="open2" @onmenuchange=OnMenuChange2>
                    <FluentMenuItem>Store this search</FluentMenuItem>
                    <FluentMenuItem>Restore search</FluentMenuItem>
                 </FluentMenu>
        </div>
    </div>
</div>

@code {
    CheckGroupType? StudyTypeFilter;
    CheckGroupStatus? StudyStatusFilter;
    YearSelection? StudyYearFilter;
    CountrySelection? StudyCountryFilter;
    CheckGroupObject? StudyObjectFilter;
    CheckGroupPhase? StudyPhaseFilter;
    CheckGroupAlloc? StudyAllocFilter;

    List<string>? BaseSet;
    List<string>? BucketSet;
    List<string>? ShowSet = null;
    List<string>? PageSet = null;
    PageControl? pagecon;

    bool doing_restore = false;

    int rec_num;
    int num_recs_per_page = 10;
    string rec_num_indicator = "No search yet run";
    int current_page = 1;
    string page_indicator = "";
    string search_url_stem = "api/Study";
    string search_url = "";
    string search_fb = "";

    string? searchText;
    string searchType = "1";
    string? idText;
    string? idType = "1";
    string hidden_attribute = "hidden";
    string? searchParamsValue;
    string paramsLabelText = "Parameters";
    bool SearchPossible = false;
    string processedPars = "";
    string searchFeedback = "";
    bool HideProgress = true;

    private bool _searchInTTs = true;
    private bool _searchInConds = true;
    private bool _showSearches = false;

    public bool searchInTTs
    {
        get => _searchInTTs;
        set
        {
            _searchInTTs = value;
            if (!doing_restore) RecalculateSearchFeedback();
        }
    }

    public bool searchInConds
    {
        get => _searchInConds;
        set
        {
            _searchInConds = value;
            if (!doing_restore) RecalculateSearchFeedback();
        }
    }

    public bool showSearches
    {
        get => _showSearches;
        set
        {
            _showSearches = value;
            if (!doing_restore)
            {
                processedPars = ProcessSearchParams(searchParamsValue);
                RecalculateSearchFeedback();
            }
        }
    }

    bool aggregateSearches = false;
    int search_scope = 3;
    int percent_done = 0; 

    FilterParams currentFP = new FilterParams();
    SearchParams? sp;   
    string fpj = default!;

    string filter_fback = "";
    string filter_sql = "";

    bool filtersBarShowing = true;
    bool isLoading = false;
    bool isEmpty = false;
    bool noResults = true;

    private Dictionary<string, string> roman_suffixes = default!;

    private void ChangeFiltersBarVisibility(bool visibility)
    {
        filtersBarShowing = visibility;
    }

    private async Task SearchClicked()
    {
        isLoading = true;
        isEmpty = false;
        noResults = true;
        rec_num_indicator = "Searching... ";

        if (searchType == "1")
        {
            search_scope = searchInTTs ? 1 : 0;
            search_scope += searchInConds ? 2 : 0;
            int page_size = pagecon?.recs_per_page ?? 10;
            processedPars = ProcessSearchParams(searchParamsValue);
            RecalculateSearchFeedback();
            bool search_allowed = true;

            if (processedPars == "ALL STUDIES")
            {
                search_allowed = AllowNoTermsSearch();
                if (!search_allowed)
                {
                    // Post explanatory message.

                    searchFeedback = "Searching without text in the search box is not possible \n";
                    searchFeedback += "(with a few exceptions relating to filters that generate relatively small result sets).\n\n";
                    searchFeedback += "Please see the User Guide for details";

                    rec_num_indicator = "Unable to search with these parameters";
                }
            }

            if (search_scope == 0 && processedPars != "ALL STUDIES")
            {
                search_allowed = false;
                searchFeedback = "Searching using text requires the search to be within titles and topics, ";
                searchFeedback += "or conditions, or both\n\n";
                searchFeedback += "Please see the User Guide for details";

                rec_num_indicator = "Unable to search with these parameters";
            }

            if (search_allowed)
            {
                BaseSet = new List<string>();
                searchFeedback = "";
                int running_total = 0;
                percent_done = 0;
                HideProgress = false;  

                if (pagecon is not null)
                {
                    pagecon.old_num_recs = 0;   // reset the page control's property
                }

                // bucket based repeat method

                bool baseset_has_1000 = false;
                int bucket = 1;

                while (!baseset_has_1000 && bucket <= 20)
                {
                    int results_needed_for_baseset = 1000 - running_total;
                    fpj = JsonSerializer.Serialize(currentFP);
                    search_url = $"{search_url_stem}/BySearch/{search_scope}/{HttpUtility.UrlEncode(processedPars)}/{bucket}/f/{fpj}";
                    BucketSet = await Http.GetFromJsonAsync<List<string>>(search_url);

                    if (BucketSet?.Any() == true)
                    {
                        if (BucketSet.Count == 1 && BucketSet[0] == "null result")
                        {
                            // do nothing - null indicator returned
                        }
                        else
                        {
                            if (BucketSet.Count > results_needed_for_baseset)
                            {
                                BaseSet.AddRange(BucketSet.Take(results_needed_for_baseset));
                            }
                            else
                            {
                                BaseSet.AddRange(BucketSet);
                            }
                            int baseset_num = BaseSet.Count;

                            baseset_has_1000 = baseset_num == 1000;
                            running_total += BucketSet.Count;  // may be over 1000
                        }
                    }
                    UpdateIndicator(running_total, bucket, BaseSet.Count);
                    bucket++;
                }

                // Display if we have reached a 1000 records or done all 20 bucket searches

                if (baseset_has_1000 || bucket > 20)
                {
                    if (BaseSet?.Any() == true)
                    {
                        ShowSet = BaseSet; // for now - i.e. no in memory filters applied
                        rec_num = baseset_has_1000 ? 1000 : ShowSet.Count;
                        noResults = false;
                        StateHasChanged();
                        await DoRemainingBuckets(bucket, running_total, fpj);
                    }
                    else
                    {
                        // No records found, even after all buckets done

                        rec_num = 0;
                        rec_num_indicator = "No records found";
                        isEmpty = true;
                        noResults = true;
                        StateHasChanged();
                    }
                    HideProgress = true;
                }
            }
        }
        else
        {
            if (searchType == "2")
            {
                string? sid = searchParamsValue?.Trim();
                if (string.IsNullOrEmpty(sid) || sid.Length < 4)
                {
                    searchFeedback = "The identifier must have at least 4 characters \n\n";
                    searchFeedback += "Please see the User Guide for details";
                    rec_num_indicator = "Unable to search with these parameters";
                }
                else
                {
                    searchFeedback = "";
                    search_url = $"{search_url_stem}/ByRegId/{idType}/{searchParamsValue}";
                    BaseSet = await Http.GetFromJsonAsync<List<string>>(search_url);
                }
            }

            if (searchType == "3")
            {
                string? pmid = searchParamsValue;
                if (pmid is null || !int.TryParse(pmid, out int _))
                {
                    searchFeedback = "The PMID input must be an integer\n\n";
                    searchFeedback += "Please see the User Guide for details";
                    rec_num_indicator = "Unable to search with these parameters";
                }
                else
                {
                    searchFeedback = "";
                    search_url = $"{search_url_stem}/ByPMID/{searchParamsValue}";
                    BaseSet = await Http.GetFromJsonAsync<List<string>>(search_url);
                }
            }


            if (BaseSet?.Any() == true)
            {
                if (BaseSet.Count == 1 && BaseSet[0] == "null result")
                {
                    rec_num_indicator = "No records found";
                    isEmpty = true;
                    noResults = true;
                }
                else
                {
                    if (pagecon is not null)
                    {
                        pagecon.old_num_recs = 0;   // reset the page control's property
                    }
                    ShowSet = BaseSet;  // for now, no filters! Apply filters to these options?
                    rec_num = ShowSet.Count;
                    noResults = false;
                    UpdateIndicator(ShowSet.Count);
                }
            }
        }
        isLoading = false;
    }


    private async Task DoRemainingBuckets(int bucket, int running_total, string fpj)
    {
        while (bucket <= 20)
        {
            search_url = $"{search_url_stem}/BySearch/{search_scope}/{HttpUtility.UrlEncode(processedPars)}/{bucket}/t/{fpj}";
            BucketSet = await Http.GetFromJsonAsync<List<string>>(search_url);

            if (BucketSet?.Any() == true)
            {
                if (BucketSet.Count == 1 && BucketSet[0].StartsWith("count:"))
                {
                    // Get the count of records for this bucket.

                    string count_string = BucketSet[0][6..].Trim();
                    if (int.TryParse(count_string, out int bucket_num))
                    {
                        running_total += bucket_num;
                    }
                }
            }
            UpdateIndicator(running_total, bucket, BaseSet!.Count);
            bucket++;
        }
    }


    private bool AllowNoTermsSearch()
    {
        if (currentFP is null || currentFP.pars_list == "")
        {
            return false;   // no filters - would return all records
        }

        if (!string.IsNullOrEmpty(currentFP.objects))
        {
            if (currentFP.objects.Contains("12") || currentFP.objects.Contains("21"))
            {
                return false;  // too many results summaries and journal articles
            }
            else
            {
                return true;  // other object types can be searched for - with or without other filters
            }
        }

        if (!string.IsNullOrEmpty(currentFP.study_type))
        {
            if (currentFP.study_type.Contains("11") || currentFP.study_type.Contains("12"))
            {
                return false; // interventional and observational studies
            }
            else
            {
                return true;  // other study types can be searched for - with or without other filters
            }
        }

        if (!string.IsNullOrEmpty(currentFP.study_status))
        {
            if (currentFP.study_status.Contains("14") || currentFP.study_status.Contains("15") || currentFP.study_status.Contains("16") ||
               currentFP.study_status.Contains("21") || currentFP.study_status.Contains("25") || currentFP.study_status.Contains("30"))
            {
                return false;
            }
            else
            {
                return true;  // leaves suspended, withdrawn and terminated only
            }
        }

        return false;  // for all other situations 
    }


    private void UpdateIndicator (int record_count, int bucket = 0, int baseset_count = 0)
    {
        rec_num_indicator = $"{record_count} Record";
        rec_num_indicator += record_count == 1 ? "" : "s";
        rec_num_indicator += $" found"; 

        if (bucket > 0)
        {
            if (record_count > baseset_count)
            {
                rec_num_indicator += $" - {baseset_count} loaded";
            }
            percent_done = bucket * 5;
        }
        StateHasChanged();
    }


    private void ShowRange(Tuple<int, int> t)
    {
        PageSet = ShowSet?.GetRange(t.Item1, t.Item2);
    }

    private void ClearFilters()
    {
        StudyTypeFilter?.ClearFilters();
        StudyStatusFilter?.ClearFilters();
        StudyObjectFilter?.ClearFilters();
        StudyPhaseFilter?.ClearFilters();
        StudyAllocFilter?.ClearFilters();
        StudyYearFilter?.ClearFilters();
        StudyCountryFilter?.ClearFilters();
    }

    private void ClearSearch()
    {
        searchParamsValue = "";
        processedPars = "ALL STUDIES";
        RecalculateSearchFeedback();

        if (!aggregateSearches)
        {
            BaseSet = new List<string>();
            ShowSet = BaseSet;
            rec_num = ShowSet.Count;
            rec_num_indicator = "Search results cleared";
            PageSet = null;
            ClearFilters();
        }
    }

    private void RecalculateSearchFeedback()
    {
        if (searchType == "1")
        { 
            search_scope = searchInTTs ? 1 : 0;
            search_scope += searchInConds ? 2 : 0;
            sp = new("1", search_scope.ToString(), processedPars, currentFP);
        }
        if (searchType == "2")
        {
            sp = new("2", idType ?? "", searchParamsValue ?? "");
        }
        if (searchType == "3")
        {
            sp = new("3", "", searchParamsValue ?? "");
        } 
        search_fb = sp.ObtainFBString();
        StateHasChanged();
    }


    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SearchClicked();
        }
        else
        {
            if (showSearches)
            {
                processedPars = ProcessSearchParams(searchParamsValue);
                RecalculateSearchFeedback();
            }
        }
    }


    private string ProcessSearchParams(string? in_pars)
    {
        if (string.IsNullOrEmpty(in_pars))
        {
            return "ALL STUDIES";
        }

        string new_st = in_pars.ToLower() + " ";  // ' ' added to catch final numbers and 'a's below
        new_st = new_st.Replace("'", "");      // simplifies things
        new_st = new_st.Replace("‘", "");
        new_st = new_st.Replace("’", "");
        new_st = new_st.Replace(".", "");      // simplifies things
        new_st = new_st.Replace("/", " ");     // split these words up
        new_st = new_st.Replace("  ", " ");    // makes comparisons below safer

        if (new_st.Contains(" in ") || new_st.StartsWith("in "))
        {
            new_st = new_st.Replace("in situ", "insitu");
            new_st = new_st.Replace("in vivo", "invivo");
            new_st = new_st.Replace("in vitro", "invitro");
            new_st = new_st.Replace("in silico", "insilico");
            new_st = new_st.Replace("in utero", "inutero");
        }
        if (new_st.Contains(" a "))
        {
            new_st = new_st.Replace("hepatitis a ", "hepatitis-a ");
            new_st = new_st.Replace("influenza a ", "influenza-a ");
            new_st = new_st.Replace("philia a ", "philia-a ");
            new_st = new_st.Replace("globin a ", "globin-a ");
            new_st = new_st.Replace("virus a ", "virus-a ");
            new_st = new_st.Replace("protein a ", "protein-a ");
            new_st = new_st.Replace("group a ", "group-a ");
            new_st = new_st.Replace("type a ", "type-a ");
            new_st = new_st.Replace("vitamin a ", "vitamin-a ");
            new_st = new_st.Replace("factor a ", "factor-a ");
            new_st = new_st.Replace("family a ", "family-a ");
            new_st = new_st.Replace("coenzyme a ", "coenzyme-a ");
            new_st = new_st.Replace("kinase a ", "kinase-a ");
            new_st = new_st.Replace("ferase a ", "ferase-a ");
            new_st = new_st.Replace("tidase a ", "tidase-a ");
            new_st = new_st.Replace("tidases a ", "tidases-a ");
            new_st = new_st.Replace("kinin a ", "kinin-a ");
        }
        if (new_st.Contains(" term "))
        {
            new_st = new_st.Replace("short term ", "short-term ");
            new_st = new_st.Replace("medium term ", "medium-term ");
            new_st = new_st.Replace("long term ", "long-term ");
        }
        if (Regex.IsMatch(new_st, @" \d{1,2} "))
        {
            while (Regex.IsMatch(new_st, @" \d{1,2} "))   // may be more than one
            {
                string to_replace = Regex.Match(new_st, @" \d{1,2} ").Value;
                string new_value;
                if (Regex.IsMatch(new_st, @" \d{1,2} mg"))
                {
                    new_value = to_replace[..^1]; // may be a dosage figure, usually mg;
                }
                else
                {
                    new_value = to_replace[1..];  // more often a suffix
                }
                new_st = new_st.Replace(to_replace, new_value);
            }
        }
        if (Regex.IsMatch(new_st, @" (?=[xvi])(x{0,2})(i[xv]|v?i{0,3}) "))
        {
            while (Regex.IsMatch(new_st, @" (?=[xvi])(x{0,2})(i[xv]|v?i{0,3}) "))
            {
                string to_replace = Regex.Match(new_st, @" (?=[xvi])(x{0,2})(i[xv]|v?i{0,3}) ").Value;
                string new_value = roman_suffixes[to_replace];
                new_st = new_st.Replace(to_replace, new_value);
            }
        }
        if (new_st.Contains("phase "))   // some phase types not picked up above
        {
            new_st = new_st.Replace("phase 1a ", "phase1a ");
            new_st = new_st.Replace("phase 1b ", "phase1b ");
            new_st = new_st.Replace("phase 1/2 ", "phase12 ");
            new_st = new_st.Replace("phase i/ii ", "phase12 ");
            new_st = new_st.Replace("phase 2/3 ", "phase23 ");
            new_st = new_st.Replace("phase ii/iii ", "phase23 ");
            new_st = new_st.Replace("phase 2a ", "phase2a ");
            new_st = new_st.Replace("phase 2b ", "phase2b ");
            new_st = new_st.Replace("phase 3/4 ", "phase34 ");
            new_st = new_st.Replace("phase iii/iv ", "phase34 ");
        }

        string output = new_st.Trim().Replace(" or ", " | ");
        output = output.Replace(" and ", " & ");
        output = output.Replace(" not (", " !(").Replace(" not(", " !(");

        // Replace remaining spaces with '&', unless part of an existing | or & space

        if (output.Contains(' '))
        {
            int pars_length = output.Length;
            string st = "";
            for (int i = 0; i < pars_length; i++)
            {
                if (output[i] == ' ')
                {
                    if (output[i - 1] != '|' && output[i + 1] != '|'
                    && output[i - 1] != '&' && output[i + 1] != '&')
                    {
                        st = st + " & ";
                    }
                    else
                    {
                        st = st + output[i];
                    }
                }
                else
                {
                    st = st + output[i];
                }
            }
            output = st;
        }

        return output;
    }

    private void updateTypeSQL(string sql)
    {
        // type_sql a string of the form...
        // 'type_id in (11, 16)'

        if (sql == "")
        {
            currentFP.study_type = null;
            currentFP.pars_list = currentFP.pars_list.Replace("T", "");
        }
        else
        {
            currentFP.study_type = sql;
            if (!currentFP.pars_list.Contains('T'))
            {
                currentFP.pars_list += 'T';
            }
        }
        if (!doing_restore) RecalculateSearchFeedback();
    }

    private void updateStatusSQL(string sql)
    {
        if (sql == "")
        {
            currentFP.study_status = null;
            currentFP.pars_list = currentFP.pars_list.Replace("S", "");
        }
        else
        {
            currentFP.study_status = sql;
            if (!currentFP.pars_list.Contains('S'))
            {
                currentFP.pars_list += 'S';
            }
        }
        if (!doing_restore) RecalculateSearchFeedback();
    }

    private void updateYearSQL(string sql)
    {
        if (sql == "")
        {
            currentFP.start_year = null;
            currentFP.pars_list = currentFP.pars_list.Replace("Y", "");
        }
        else
        {
            currentFP.start_year = sql;
            if (!currentFP.pars_list.Contains('Y'))
            {
                currentFP.pars_list += 'Y';
            }
        }
        if (!doing_restore) RecalculateSearchFeedback();

    }

    private void updateObjectSQL(string sql)
    {
        if (sql == "")
        {
            currentFP.objects = null;
            currentFP.pars_list = currentFP.pars_list.Replace("B", "");
        }
        else
        {
            currentFP.objects = sql;
            if (!currentFP.pars_list.Contains('B'))
            {
                currentFP.pars_list += 'B';
            }
        }
        if (!doing_restore) RecalculateSearchFeedback();
    }

    private void updateCountryList(List<Country> countriesSelected)
    {
        string sqlparams = "";
        string country_names = "";
        if (countriesSelected?.Any() == true)
        {
            foreach (Country c in countriesSelected)
            {
                sqlparams += ", " + c.id.ToString();
                country_names += ", " + c.name;
            }
            currentFP.countries = $"({sqlparams[2..]})";
            currentFP.country_names = country_names[2..];

            if (!currentFP.pars_list.Contains('C'))
            {
                currentFP.pars_list += 'C';
            }
        }
        else
        {
            currentFP.countries = null;
            currentFP.pars_list = currentFP.pars_list.Replace("C", "");
        }
        if (!doing_restore) RecalculateSearchFeedback();
    }

    private void updatePhaseSQL(string sql)
    {
        if (sql == "")
        {
            currentFP.phase = null;
            currentFP.pars_list = currentFP.pars_list.Replace("P", "");
        }
        else
        {
            currentFP.phase = sql;
            if (!currentFP.pars_list.Contains('P'))
            {
                currentFP.pars_list += 'P';
            }
        }
        if (!doing_restore) RecalculateSearchFeedback();
    }

    private void updateAllocSQL(string sql)
    {
        if (sql == "")
        {
            currentFP.alloc = null;
            currentFP.pars_list = currentFP.pars_list.Replace("A", "");
        }
        else
        {
            currentFP.alloc = sql;
            if (!currentFP.pars_list.Contains('A'))
            {
                currentFP.pars_list += 'A';
            }
        }
        if (!doing_restore) RecalculateSearchFeedback();
    }

    List<Option<string>> searchOptions = default!;
    List<Option<string>> idOptions = default!;

    protected override void OnInitialized()
    {
        searchOptions = new()
        {
            { new Option<string> { Value = "1", Text = "Key word(s)", Selected = true } },
            { new Option<string> { Value = "2", Text = "Study identifier"} },
            { new Option<string> { Value = "3", Text = "Paper identifier (PMID)" } }
        };

        idOptions = new()
        {
            { new Option<string> { Value = "11", Text = "Trial registry ID", Selected = true } },
            { new Option<string> { Value = "12", Text = "Ethics Review ID"} },
            { new Option<string> { Value = "13", Text = "Funder’s ID"} },
            { new Option<string> { Value = "14", Text = "Sponsor’s ID" } },
            { new Option<string> { Value = "41", Text = "Regulatory Authority ID" } },
            { new Option<string> { Value = "39", Text = "NIH CTRP ID"} },
            { new Option<string> { Value = "40", Text = "DAIDS ID"} },
            { new Option<string> { Value = "42", Text = "NHBLI ID" } },
            { new Option<string> { Value = "45", Text = "Obsolete NTR number" } },
            { new Option<string> { Value = "45", Text = "CDR Number" } }
        };

        roman_suffixes = new()
        {
            {" i ", "1 "}, {" ii ", "2 "},{" iii ", "3 "},{" iv ", "4 "},{" v ", "5 "},
            {" vi ", "6 "},{" vii ", "7 "},{" viii ", "8 "},{" ix ", "9 "},{" x ", "10 "},
            {" xi ", "11 "}, {" xii ", "12 "},{" xiii ", "13 "},{" xiv ", "14 "},{" xv ", "15 "},
            {" xvi ", "16 "},{" xvii ", "17 "},{" xviii ", "18 "},{" xix ", "19 "},{" xx ", "20 " },
            {" xxi ", "21 "},{" xxii ", "22 "},{" xxiii ", "23 "},{" xxiv ", "24 "},{" xxv ", "25 " },
            {" xxvi ", "26 "},{" xxvii ", "27 "},{" xxviii ", "28 "},
            {" xxix ", "29 "},{" xxx ", "30 " }
        };
    }


    private void SearchOptionChanged(Option<string> s)
    {
        searchText = s?.Text ?? "None";
        searchType = s?.Value ?? "";
        paramsLabelText = searchType switch 
        {
            "1" => "Words",
            "2" => "Identifier",
            "3" => "PubMed ID",
            _ => "Parameters"
        };
        hidden_attribute = searchType == "2" ? "shown": "hidden";


        if (!doing_restore) RecalculateSearchFeedback();


        /* for now - to make testing easier
        if (searchType == 1)
        {
        searchParamsValue = "brca";
        processedPars = ProcessSearchParams(searchParamsValue);
        }

        if (searchType == 2)
        {
        idType = 11;
        searchParamsValue = "NCT01746290";
            }

            if (searchType == 3)
        {

        searchParamsValue = "1017769"; // "1017769"; "462143";
    }        */

    }

    private void idOptionChanged(Option<string> s)
    {
        idText = s?.Text ?? "None";
        idType = s?.Value ?? "";
        if (!doing_restore) RecalculateSearchFeedback();

        /* for now - to make testing easier
        if (idType == 11)
        {
           searchParamsValue = "NCT01746290";
        }
        if (idType == 14)
        {
            searchParamsValue = "19.05.CLI";
        }
        */

    }


    bool open = false;
    bool open2 = false;
    private string status = "";

    private void OnMenuChange(MenuChangeEventArgs args)
    {
        if (args is not null && args.Value is not null)
            status = $"Item \"{args.Value}\" clicked";
    }


    private async Task OnMenuChange2(MenuChangeEventArgs args)
    {
        if (args is not null && args.Value is not null)
        {
            string res = args.Value;

            if (res == "Store this search")
            {
                bool search_save_allowed = true;
                if (searchType == "1")
                {
                    processedPars = ProcessSearchParams(searchParamsValue);
                    search_scope = searchInTTs ? 1 : 0;
                    search_scope += searchInConds ? 2 : 0;
                    if (search_scope == 0 && processedPars != "ALL STUDIES")
                    {
                        search_save_allowed = false;
                    }
                    else if (processedPars == "ALL STUDIES")
                    {
                        search_save_allowed = AllowNoTermsSearch();
                    }

                    if (!search_save_allowed)
                    {
                        // Post explanatory message.

                        searchFeedback = "Saving this Search not possible:\n";
                        searchFeedback += "The current search parameters do not correspond to a valid search.\n\n";
                        searchFeedback += "Please see the User Guide for details";
                    }
                }

                if (search_save_allowed)
                {
                    searchFeedback = "";
                    RecalculateSearchFeedback();
                    if (sp is not null)
                    {
                        // Set up and show the dialog - if scope > 0 and search allowed
                        // Await result - store if data returned 

                        string date_string = DateTime.Now.ToString("yyyyMMdd");
                        sp.storage_name = sp.pars + "_" + date_string;
                        DialogParameters<SearchParams> parameters = new()
                        {
                            Content = sp,
                            Title = $"Storing this search", 
                            PrimaryAction = "Save",
                            SecondaryAction = "Cancel",
                            Width = "32rem",
                            Height = "28.5rem",
                            TrapFocus = true,
                            Modal = true,
                            PreventScroll = true
                        };
                        IDialogReference dialog = await DialogService.ShowDialogAsync<SearchStorer>(sp, parameters);

                        DialogResult? result = await dialog.Result;
                        if (result.Data is not null && !result.Cancelled)
                        {
                            SearchParams? returned_sp = result.Data as SearchParams;
                            if (returned_sp is not null)
                            {
                                if (!returned_sp.storage_name.StartsWith("MDR_"))
                                {
                                    returned_sp.storage_name = "MDR_" + returned_sp.storage_name;
                                }
                                await localStorage.SetItemAsync<SearchParams>(returned_sp.storage_name, returned_sp);
                            }
                        }
                    }
                }
            }

            if (res == "Restore search")
            {
                SearchParams? sp = new();
                DialogParameters<SearchParams> parameters = new()
                    {
                        Content = sp,
                        Title = $"Restoring search",
                        PrimaryAction = "Restore Selected",
                        SecondaryAction = "Cancel",
                        Width = "32rem",
                        Height = "40rem",
                        TrapFocus = true,
                        Modal = true,
                        PreventScroll = true
                    };

                IDialogReference dialog = await DialogService.ShowDialogAsync<SearchRestorer>(sp, parameters);

                DialogResult? result = await dialog.Result;

                doing_restore = true;
                if (result.Data is not null && !result.Cancelled)
                {
                    SearchParams? returned_sp = result.Data as SearchParams;
                    if (returned_sp is not null)
                    {
                        searchType = returned_sp.type;
                        paramsLabelText = searchType switch
                        {
                            "1" => "Words",
                            "2" => "Identifier",
                            "3" => "PubMed ID",
                            _ => "Parameters"
                        };
                        hidden_attribute = searchType == "2" ? "shown" : "hidden";

                        if (searchType == "1")
                        {
                            search_scope = int.Parse(returned_sp.scope);
                            searchInConds = search_scope > 1 ? true : false;
                            searchInTTs = search_scope is 1 or 3 ? true : false;

                            if (returned_sp.fp is not null)
                            {
                                currentFP = returned_sp.fp;
                                StudyTypeFilter?.SetFilters(currentFP.study_type);
                                StudyStatusFilter?.SetFilters(currentFP.study_status);
                                StudyYearFilter?.SetFilters(currentFP.start_year);
                                StudyCountryFilter?.SetFilters(currentFP.countries, currentFP.country_names);
                                StudyObjectFilter?.SetFilters(currentFP.objects);
                                StudyPhaseFilter?.SetFilters(currentFP.phase);
                            }
                        }

                        if (searchType is "2" or "3")
                        {
                            if (searchType == "2")
                            {
                                idType = returned_sp.scope;
                            }
                            ClearFilters();
                        }
                        
                        searchParamsValue = returned_sp.pars;
                        processedPars = ProcessSearchParams(searchParamsValue);

                        BaseSet = new List<string>();
                        ShowSet = BaseSet;
                        rec_num = ShowSet.Count;
                        rec_num_indicator = "Search parameters restored";
                        PageSet = null;

                        RecalculateSearchFeedback();
                        StateHasChanged();
                    }
                }
                doing_restore = false;
            }  
        }
    }
}
